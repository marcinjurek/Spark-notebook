{"metadata":{"name":"test","user_save_timestamp":"2014-12-03T22:12:58.863Z","auto_save_timestamp":"2014-12-03T22:10:42.476Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":["com.datastax.spark % spark-cassandra-connector-java_2.10 % 1.3.0-M1"],"customImports":["import java.util.UUID","import scala.util._","import org.apache.spark.SparkContext._","import com.datastax.spark.connector._"],"customSparkConf":{"spark.cassandra.connection.host":"10.2.2.148"}},"cells":[{"metadata":{},"cell_type":"markdown","source":"### My Spark Config"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"sparkContext.getConf.toDebugString","outputs":[{"name":"stdout","output_type":"stream","text":"res14: String = \nspark.app.id=local-1434647450196\nspark.app.name=Notebook\nspark.cassandra.connection.host=10.2.2.148\nspark.driver.host=1433acc81ddd\nspark.driver.port=53991\nspark.executor.id=<driver>\nspark.fileserver.uri=http://172.17.0.2:38895\nspark.jars=/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.10.5.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/commons-codec/commons-codec/jars/commons-codec-1.2.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/commons-logging/commons-logging/jars/commons-logging-1.1.1.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/com.datastax.spark/spark-cassandra-connector_2.10/jars/spark-cassandra-connector_2.10-1.3.0-M..."},{"metadata":{},"data":{"text/html":"spark.app.id=local-1434647450196\nspark.app.name=Notebook\nspark.cassandra.connection.host=10.2.2.148\nspark.driver.host=1433acc81ddd\nspark.driver.port=53991\nspark.executor.id=&lt;driver&gt;\nspark.fileserver.uri=http://172.17.0.2:38895\nspark.jars=/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.10.5.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/commons-codec/commons-codec/jars/commons-codec-1.2.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/commons-logging/commons-logging/jars/commons-logging-1.1.1.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/com.datastax.spark/spark-cassandra-connector_2.10/jars/spark-cassandra-connector_2.10-1.3.0-M1.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.scala-lang/scala-library/jars/scala-library-2.10.5.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.apache.commons/commons-lang3/jars/commons-lang3-3.3.2.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/com.twitter/jsr166e/jars/jsr166e-1.1.0.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.apache.httpcomponents/httpclient/jars/httpclient-4.2.5.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.joda/joda-convert/jars/joda-convert-1.2.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/io.netty/netty/bundles/netty-3.9.0.Final.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.slf4j/slf4j-api/jars/slf4j-api-1.7.5.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/com.datastax.spark/spark-cassandra-connector-java_2.10/jars/spark-cassandra-connector-java_2.10-1.3.0-M1.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/com.google.guava/guava/bundles/guava-14.0.1.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.apache.cassandra/cassandra-thrift/jars/cassandra-thrift-2.1.3.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.apache.thrift/libthrift/jars/libthrift-0.9.2.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.apache.cassandra/cassandra-clientutil/jars/cassandra-clientutil-2.1.3.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/com.codahale.metrics/metrics-core/bundles/metrics-core-3.0.2.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/org.apache.httpcomponents/httpcore/jars/httpcore-4.2.4.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/com.datastax.cassandra/cassandra-driver-core/bundles/cassandra-driver-core-2.1.5.jar,/tmp/spark-notebook/repo/3cc7c80e-5e0d-4b11-a441-4318ea859537/cache/joda-time/joda-time/jars/joda-time-2.3.jar\nspark.master=local[*]\nspark.repl.class.uri=http://172.17.0.2:42420\nspark.tachyonStore.baseDir=/share\nspark.tachyonStore.folderName=spark-d8c71a0b-7bcd-4b72-8955-c070c7c3b53f\nspark.tachyonStore.url=tachyon://1433acc81ddd:18998\n <div class='pull-right text-info'><small>352 milliseconds</small></div>"},"output_type":"execute_result","execution_count":19}]},{"metadata":{},"cell_type":"markdown","source":"### What's in the table:"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"We use the plain vanilla way of loading the data. Everything works","outputs":[]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"val urls = sparkContext.cassandraTable(\"urls\", \"urls_meta\")","outputs":[{"name":"stdout","output_type":"stream","text":"urls: com.datastax.spark.connector.rdd.CassandraTableScanRDD[com.datastax.spark.connector.CassandraRow] = CassandraTableScanRDD[8] at RDD at CassandraRDD.scala:15\n"},{"metadata":{},"data":{"text/html":"CassandraTableScanRDD[8] at RDD at CassandraRDD.scala:15\n <div class='pull-right text-info'><small>257 milliseconds</small></div>"},"output_type":"execute_result","execution_count":22}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"urls.take(1)","outputs":[{"name":"stdout","output_type":"stream","text":"res20: Array[com.datastax.spark.connector.CassandraRow] = Array(CassandraRow{url_id: 8fec9681-96e3-4915-9815-c2b9c9bad7f8, b64url: aHR0cDovL2VuY29udHJhYXV0by5jb20uYnIvd3IvY2Qv, insert_time: null, label: phishing, source: null})\n"},{"metadata":{},"data":{"text/html":"[Lcom.datastax.spark.connector.CassandraRow;@6c4a0804\n <div class='pull-right text-info'><small>413 milliseconds</small></div>"},"output_type":"execute_result","execution_count":26}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"urls.take(1)(0).columnNames","outputs":[{"name":"stdout","output_type":"stream","text":"res19: IndexedSeq[String] = WrappedArray(url_id, b64url, insert_time, label, source)\n"},{"metadata":{},"data":{"text/html":"<div class=\"container-fluid\"><div><div class=\"col-md-12\"><div>\n    <script data-this=\"{&quot;dataId&quot;:&quot;anonf0bb717a4892d13cc40af93570221195&quot;,&quot;dataInit&quot;:[{&quot;string value&quot;:&quot;url_id&quot;},{&quot;string value&quot;:&quot;b64url&quot;},{&quot;string value&quot;:&quot;insert_time&quot;},{&quot;string value&quot;:&quot;label&quot;},{&quot;string value&quot;:&quot;source&quot;}],&quot;genId&quot;:&quot;1213995322&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"string value\"],\"nrow\":5,\"shown\":25,\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script></div></div></div></div>\n <div class='pull-right text-info'><small>492 milliseconds</small></div>"},"output_type":"execute_result","execution_count":25}]},{"metadata":{},"cell_type":"markdown","source":"### Problems"},{"metadata":{},"cell_type":"markdown","source":"Let's create the case class in a separate cell:"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false},"cell_type":"code","source":"case class URL(uuid: java.util.UUID, b64url: String, insert_time: java.util.Date, source: String)","outputs":[{"name":"stdout","output_type":"stream","text":"defined class URL\n"},{"metadata":{},"data":{"text/html":"\n <div class='pull-right text-info'><small>215 milliseconds</small></div>"},"output_type":"execute_result","execution_count":10}]},{"metadata":{},"cell_type":"markdown","source":"This doesn't work:"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":true},"cell_type":"code","source":"val urls = sparkContext.cassandraTable[URL](\"urls\", \"urls_meta\")\nurls.take(10)","outputs":[{"name":"stdout","output_type":"stream","text":"java.lang.IllegalArgumentException: Failed to map constructor parameter uuid in URL to a column of urls.urls_meta\n\tat com.datastax.spark.connector.mapper.DefaultColumnMapper$$anonfun$4$$anonfun$apply$1.apply(DefaultColumnMapper.scala:76)\n\tat com.datastax.spark.connector.mapper.DefaultColumnMapper$$anonfun$4$$anonfun$apply$1.apply(DefaultColumnMapper.scala:76)\n\tat scala.Option.getOrElse(Option.scala:120)\n\tat com.datastax.spark.connector.mapper.DefaultColumnMapper$$anonfun$4.apply(DefaultColumnMapper.scala:76)\n\tat com.datastax.spark.connector.mapper.DefaultColumnMapper$$anonfun$4.apply(DefaultColumnMapper.scala:74)\n\tat scala.collection.TraversableLike$WithFilter$$anonfun$map$2.apply(TraversableLike.scala:722)\n\tat scala.collection.immutable.List.foreach(List.scala:318)\n\tat scala.collection.TraversableLike$WithFilter.map(TraversableLike.scala:721)\n\tat com.datastax.spark.connector.mapper.DefaultColumnMapper.columnMapForReading(DefaultColumnMapper.scala:74)\n\tat com.datastax.spark.connector.rdd.reader.GettableDataToMappedTypeConverter.<init>(GettableDataToMappedTypeConverter.scala:54)\n\tat com.datastax.spark.connector.rdd.reader.ClassBasedRowReader.<init>(ClassBasedRowReader.scala:22)\n\tat com.datastax.spark.connector.rdd.reader.ClassBasedRowReaderFactory.rowReader(ClassBasedRowReader.scala:50)\n\tat com.datastax.spark.connector.rdd.reader.ClassBasedRowReaderFactory.rowReader(ClassBasedRowReader.scala:45)\n\tat com.datastax.spark.connector.rdd.CassandraTableRowReaderProvider$class.rowReader(CassandraTableRowReaderProvider.scala:46)\n\tat com.datastax.spark.connector.rdd.CassandraTableScanRDD.rowReader$lzycompute(CassandraTableScanRDD.scala:59)\n\tat com.datastax.spark.connector.rdd.CassandraTableScanRDD.rowReader(CassandraTableScanRDD.scala:59)\n\tat com.datastax.spark.connector.rdd.CassandraTableRowReaderProvider$class.verify(CassandraTableRowReaderProvider.scala:149)\n\tat com.datastax.spark.connector.rdd.CassandraTableScanRDD.verify(CassandraTableScanRDD.scala:59)\n\tat com.datastax.spark.connector.rdd.CassandraTableScanRDD.getPartitions(CassandraTableScanRDD.scala:118)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:219)\n\tat org.apache.spark.rdd.RDD$$anonfun$partitions$2.apply(RDD.scala:217)\n\tat scala.Option.getOrElse(Option.scala:120)\n\tat org.apache.spark.rdd.RDD.partitions(RDD.scala:217)\n\tat org.apache.spark.rdd.RDD.take(RDD.scala:1156)\n\tat com.datastax.spark.connector.rdd.CassandraRDD.take(CassandraRDD.scala:118)\n\tat com.datastax.spark.connector.rdd.CassandraRDD.take(CassandraRDD.scala:119)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:51)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:57)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:59)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:61)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:63)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:65)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:67)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:69)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:71)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:73)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:75)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:77)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:79)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:81)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:83)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:85)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:87)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:89)\n\tat $iwC$$iwC$$iwC$$iwC.<init>(<console>:91)\n\tat $iwC$$iwC$$iwC.<init>(<console>:93)\n\tat $iwC$$iwC.<init>(<console>:95)\n\tat $iwC.<init>(<console>:97)\n\tat <init>(<console>:99)\n\tat .<init>(<console>:103)\n\tat .<clinit>(<console>)\n\tat .<init>(<console>:7)\n\tat .<clinit>(<console>)\n\tat $print(<console>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1338)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat notebook.kernel.Repl$$anonfun$3.apply(Repl.scala:172)\n\tat notebook.kernel.Repl$$anonfun$3.apply(Repl.scala:172)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)\n\tat scala.Console$.withOut(Console.scala:126)\n\tat notebook.kernel.Repl.evaluate(Repl.scala:171)\n\tat notebook.client.ReplCalculator$$anonfun$10$$anon$1$$anonfun$receive$1$$anonfun$26.apply(ReplCalculator.scala:269)\n\tat notebook.client.ReplCalculator$$anonfun$10$$anon$1$$anonfun$receive$1$$anonfun$26.apply(ReplCalculator.scala:268)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:41)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(AbstractDispatcher.scala:393)\n\tat scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n\n"}]},{"metadata":{},"cell_type":"markdown","source":"Now let's define the class in the same cell:"}],"nbformat":4}